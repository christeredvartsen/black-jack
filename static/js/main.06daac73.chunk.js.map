{"version":3,"sources":["propTypes.js","Deck/Deck.js","utils.js","GameResult/GameResult.js","Player/Player.js","RestartGame/RestartGame.js","Board/Board.js","Error/Error.js","App/App.js","index.js"],"names":["card","PropTypes","shape","suit","oneOf","isRequired","value","cards","arrayOf","Deck","name","string","score","number","_ref","react_default","a","createElement","length","gameState","getCardsScore","reduce","result","toLowerCase","parseInt","getCardValue","getGameState","p1","p2","GameResult","s","cardKey","c","charAt","Player","drawCard","draw","className","map","key","onClick","RestartGame","reset","Board","deck","player1","player2","src_Deck_Deck","src_GameResult_GameResult","src_Player_Player","Object","assign","src_RestartGame_RestartGame","Error","message","Fragment","DECK_URL","initialState","error","undefined","App","requestSource","axios","CancelToken","source","state","currentPlayer","_this$setState","_this$state$deck","toArray","_this","rest","slice","playersCards","concat","toConsumableArray","newScore","updatedPlayer","otherPlayer","setState","defineProperty","startGame","get","timeout","cancelToken","token","then","data","_deck","c1","c2","c3","c4","player1Cards","player1Score","player2Cards","player2Score","catch","this","cancel","src_Error_Error","src_Board_Board","Component","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.06daac73.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst card = PropTypes.shape({\n  suit: PropTypes.oneOf(['HEARTS', 'SPADES', 'CLUBS', 'DIAMONDS']).isRequired,\n  value: PropTypes.oneOf(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']).isRequired,\n});\nconst cards = PropTypes.arrayOf(card);\nconst player = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  cards: cards.isRequired,\n});\n\nexport default {\n  card,\n  cards,\n  player,\n};","import React from 'react';\nimport types from '../propTypes';\n\nconst Deck = ({ cards }) => (\n  <p>There are {cards.length} cards left in the deck.</p>\n);\nDeck.propTypes = {\n  cards: types.cards.isRequired,\n};\n\nexport default Deck;","const gameState = {\n  BOTH_WINS: 'both win',\n  BOTH_LOSE: 'both lose',\n  P1_WINS: 'player 1 wins',\n  P2_WINS: 'player 2 wins',\n  P1_DRAWS: 'player 1 to draw',\n  P2_DRAWS: 'player 2 to draw',\n};\n\nconst getCardValue = ({ value }) => {\n  let result;\n\n  switch (value.toLowerCase()) {\n    case 'j': // continue\n    case 'q': // continue\n    case 'k': result = 10; break;\n    case 'a': result = 11; break;\n    default: result = parseInt(value, 10);\n  };\n\n  return result;\n};\n\nconst getCardsScore = (cards) => cards.reduce((score, card) => score + getCardValue(card), 0);\n\nconst getGameState = (p1, p2) => {\n  if (p1 === 21 && p2 === 21) {\n    return gameState.BOTH_WINS;\n  } else if (p1 > 21 && p2 > 21) {\n    return gameState.BOTH_LOSE;\n  } else if (p2 > 21 || p1 === 21) {\n    return gameState.P1_WINS;\n  } else if (p1 > 21 || (p1 >= 17 && p2 > p1)) {\n    return gameState.P2_WINS;\n  } else if (p1 < 17) {\n    return gameState.P1_DRAWS;\n  } else {\n    return gameState.P2_DRAWS;\n  }\n};\n\nexport {\n  getCardValue,\n  getCardsScore,\n  gameState,\n  getGameState,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { gameState as s } from '../utils';\n\nconst GameResult = ({ result, p1, p2 }) => {\n  switch (result) {\n    case s.BOTH_WINS: return <h2>Both won!</h2>;\n    case s.BOTH_LOSE: return <h2>Both lose!</h2>;\n    case s.P1_WINS: return <h2>{p1} won!</h2>;\n    case s.P2_WINS: return <h2>{p2} won!</h2>;\n    default: return null;\n  }\n}\nGameResult.propTypes = {\n  result: PropTypes.string.isRequired,\n  p1: PropTypes.string.isRequired,\n  p2: PropTypes.string.isRequired,\n};\n\nexport default GameResult;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport types from '../propTypes';\nimport './Player.scss';\n\nconst cardKey = (c) => c.value + c.suit.charAt(0);\n\nconst Player = ({ drawCard, name, score, cards, draw }) => {\n  return (\n    <fieldset className=\"player\">\n      <legend>{name}</legend>\n      <dl>\n        <dt>Score</dt>\n        <dd className=\"playerScore\">{score}</dd>\n        <dt>Cards</dt>\n        <dd className=\"playerCards\">\n          {cards.length > 0 ? (\n            <ol>{cards.map((card) => <li key={cardKey(card)}>{cardKey(card)}</li>)}</ol>\n          ) : <p>The player has no cards.</p>}\n        </dd>\n      </dl>\n      {draw ? <button onClick={drawCard}>Draw</button> : null}\n    </fieldset>\n  );\n};\nPlayer.propTypes = {\n  drawCard: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  cards: types.cards.isRequired,\n  draw: PropTypes.bool.isRequired,\n};\n\nexport default Player;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RestartGame = ({ reset }) => (\n  <button onClick={reset}>Restart game</button>\n);\nRestartGame.propTypes = {\n  reset: PropTypes.func.isRequired,\n};\n\nexport default RestartGame;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Deck from '../Deck/Deck';\nimport GameResult from '../GameResult/GameResult';\nimport Player from '../Player/Player';\nimport RestartGame from '../RestartGame/RestartGame';\nimport { gameState as s } from '../utils';\nimport types from '../propTypes';\nimport './Board.scss';\n\nconst Board = ({ drawCard, gameState, reset, deck, player1, player2 }) => (\n  <div>\n    <Deck cards={deck} />\n    <GameResult result={gameState} p1={player1.name} p2={player2.name} />\n    <div className=\"players\">\n      <Player {...player1} drawCard={() => drawCard('player1')} draw={gameState === s.P1_DRAWS} />\n      <Player {...player2} drawCard={() => drawCard('player2')} draw={gameState === s.P2_DRAWS} />\n    </div>\n    <RestartGame reset={reset} />\n  </div>\n);\nBoard.propTypes = {\n  deck: types.cards.isRequired,\n  gameState: PropTypes.string.isRequired,\n  drawCard: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n  player1: types.player.isRequired,\n  player2: types.player.isRequired\n};\n\nexport default Board;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RestartGame from '../RestartGame/RestartGame';\nimport './Error.scss';\n\nconst Error = ({ message, reset }) => (\n  <React.Fragment>\n    <p>An error occurred: <span className=\"errorMessage\">{message}</span>.</p>\n    <RestartGame reset={reset} />\n  </React.Fragment>\n);\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\nexport default Error;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Board from '../Board/Board';\nimport Error from '../Error/Error';\nimport { getCardsScore, gameState as s, getGameState } from '../utils';\n\nconst DECK_URL = 'https://nav-deckofcards.herokuapp.com/shuffle';\n\nconst initialState = {\n  error: undefined,\n  deck: [],\n  player1: {\n    name: 'Christer',\n    score: 0,\n    cards: [],\n  },\n  player2: {\n    name: 'Magnus',\n    score: 0,\n    cards: [],\n  },\n  gameState: s.P1_DRAWS,\n};\n\nclass App extends Component {\n  requestSource = axios.CancelToken.source();\n  state = Object.assign({}, initialState);\n\n  drawCard = (currentPlayer) => {\n    const [card, ...rest] = this.state.deck;\n    const playersCards = [...this.state[currentPlayer].cards, card];\n    const newScore = getCardsScore(playersCards);\n    const updatedPlayer = Object.assign({}, this.state[currentPlayer], {\n      cards: playersCards,\n      score: newScore,\n    });\n\n    const otherPlayer = currentPlayer === 'player1' ? 'player2' : 'player1';\n    const gameState = currentPlayer === 'player1'\n      ? getGameState(updatedPlayer.score, this.state[otherPlayer].score)\n      : getGameState(this.state[otherPlayer].score, updatedPlayer.score);\n\n    this.setState({\n      deck: rest,\n      [currentPlayer]: updatedPlayer,\n      gameState,\n    });\n  };\n\n  reset = () => {\n    this.setState(Object.assign({}, initialState));\n    this.startGame();\n  };\n\n  startGame = () => {\n    axios.get(DECK_URL, {\n      timeout: 5000,\n      cancelToken: this.requestSource.token\n    }).then(({ data: deck }) => {\n      const [c1, c2, c3, c4, ...rest] = deck;\n      const player1Cards = [c1, c2];\n      const player1Score = getCardsScore(player1Cards);\n      const player2Cards = [c3, c4];\n      const player2Score = getCardsScore(player2Cards);\n\n      const player1 = Object.assign({}, this.state.player1, {\n        cards: player1Cards,\n        score: player1Score,\n      });\n      const player2 = Object.assign({}, this.state.player2, {\n        cards: player2Cards,\n        score: player2Score,\n      });\n      const gameState = getGameState(player1Score, player2Score);\n\n      this.setState({\n        deck: rest,\n        player1,\n        player2,\n        gameState,\n      });\n    }).catch((error) => {\n      this.setState({\n        error: error.message\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.startGame();\n  }\n\n  componentWillUnmount() {\n    this.requestSource && this.requestSource.cancel('Request cancelled');\n  }\n\n  render() {\n    return typeof this.state.error !== 'undefined' ? (\n      <Error message={this.state.error} reset={this.reset} />\n    ) : this.state.deck.length > 0 ?\n        <Board\n          gameState={this.state.gameState}\n          reset={this.reset}\n          deck={this.state.deck}\n          player1={this.state.player1}\n          player2={this.state.player2}\n          drawCard={this.drawCard}\n        />\n        : <p>Loading deck...</p>;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}